# ./utils/plot.py
# 2024.05.14 CDR
#
# Plotting functions
#


def make_graph(transition_counts):
    import networkx as nx
    import numpy as np
    import pandas as pd

    import matplotlib.pyplot as plt

    G = nx.DiGraph()

    for syl, nextSyl in transition_counts.index:
        count = transition_counts.loc[(syl, nextSyl)]
        G.add_edge(syl, nextSyl, weight=count)

    return G


def draw_graph(
    G,
    ax=None,
    graphviz_layout="neato",
    node_kwargs={
        "node_color": "w",  # [[0.3, 0.5, 0.8]],
        "node_size": 400,
        "edgecolors": "k",
    },
    edge_kwargs={
        "arrows": True,
        "arrowsize": 12,
        "width": 0.5,
    },
    font_kwargs={},
):
    import networkx as nx
    import matplotlib.pyplot as plt

    if ax is None:
        fig, ax = plt.subplots()
    else:
        plt.sca(ax)

    seed = 9  # Seed random number generators for reproducibility
    pos = nx.nx_agraph.graphviz_layout(G, graphviz_layout)
    # pos = nx.circular_layout(G)
    # pos = nx.spring_layout(G, seed=seed)
    # pos = nx.shell_layout(G)
    # pos = nx.arf_layout(G)

    nodes = nx.draw_networkx_nodes(G, pos, **node_kwargs)
    labels = nx.draw_networkx_labels(G, pos)

    edges = nx.draw_networkx_edges(G, pos, **edge_kwargs)

    weights = nx.get_edge_attributes(G, "weight")
    if isinstance(list(weights.values())[0], float):  # make float labels 2 dec
        weights = {k: "%.2f" % v for k, v in weights.items()}

    edge_labels = nx.draw_networkx_edge_labels(
        G,
        pos,
        edge_labels=weights,
        **font_kwargs,
    )

    return ax


def confusion_matrix_plot(
    cm,
    labels=None,
    prob=True,
    ax=None,
    cmap="magma",
    text_kw={"size": "x-small"},
    values_format=".1e",
    **plot_kwarg,
):
    import matplotlib.pyplot as plt
    import numpy as np
    from sklearn.metrics import ConfusionMatrixDisplay

    if ax is None:
        fig, ax = plt.subplots()

    if prob:
        cm = (cm.T / cm.sum(1)).T
        cm[np.isnan(cm)] = 0  # columns with no predictions

    disp = ConfusionMatrixDisplay(
        confusion_matrix=cm,
        display_labels=labels,
    )
    disp.plot(
        ax=ax,
        cmap=cmap,
        text_kw=text_kw,
        values_format=values_format,
        **plot_kwarg,
    )

    return ax


def get_custom_tab25_cmap():
    """
    Returns a length 25 colormap originally generated by distinctipy.
    """
    cmap = (
        (0.4497487, 0.4718767, 0.5942480),
        (0.6290267, 0.8856539, 0.4503266),
        (0.6904194, 0.6914681, 0.9815206),
        (0.9863279, 0.4796556, 0.5154868),
        (0.4517669, 0.4705035, 0.9665921),
        (0.5431298, 0.9495135, 0.8116775),
        (0.9817885, 0.9248574, 0.5941716),
        (0.4480328, 0.7592994, 0.7388683),
        (0.6290131, 0.5237998, 0.8076570),
        (0.9629470, 0.7563068, 0.9631502),
        (0.4490579, 0.6493701, 0.4551497),
        (0.9952212, 0.7182117, 0.6317027),
        (0.9788578, 0.4793364, 0.7165476),
        (0.7880826, 0.4522087, 0.6080134),
        (0.5289738, 0.7714431, 0.5404403),
        (0.9610336, 0.9060630, 0.8381917),
        (0.8896936, 0.6847108, 0.7907137),
        (0.6347932, 0.9817782, 0.9932554),
        (0.4563075, 0.8928227, 0.9615504),
        (0.5119891, 0.5842180, 0.9950240),
        (0.5451765, 0.9827373, 0.6166428),
        (0.9645324, 0.6281462, 0.4450814),
        (0.9728047, 0.4467564, 0.8979948),
        (0.4522874, 0.5088940, 0.4451807),
        (0.5029561, 0.4517384, 0.7365014),
    )

    return cmap